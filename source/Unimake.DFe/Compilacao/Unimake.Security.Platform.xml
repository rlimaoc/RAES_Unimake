<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Unimake.Security.Platform</name>
    </assembly>
    <members>
        <member name="T:Unimake.Security.Platform.CertificadoDigital">
            <summary>
            Trabalhar com certificado digital
            </summary>
        </member>
        <member name="M:Unimake.Security.Platform.CertificadoDigital.#ctor">
            <summary>
            Trabalhar com certificado digital
            </summary>
        </member>
        <member name="M:Unimake.Security.Platform.CertificadoDigital.AbrirTelaSelecao">
            <summary>
            Abre a tela de dialogo do windows para seleção do certificado digital
            </summary>
            <returns>Retorna o certificado digital selecionado</returns>
            <example>
            <code>
            var certificado = new CertificadoDigital();
            var certificadoSelecionado = certificado.AbrirTelaSelecao();
            MessageBox.Show(certificadoSelecionado.Subject);
            </code>
            </example>
        </member>
        <member name="M:Unimake.Security.Platform.CertificadoDigital.BuscarCertificadoDigital(System.String)">
            <summary>
            Busca o certificado digital pelo Serial Number ou Thumb Print no repositório do windows
            </summary>
            <param name="serialNumberOrThumbPrint">Serial number ou Thumb print do certificado digital a ser utilizado na localização</param>
            <returns>Certificado digital</returns>
            <example>
            Buscar o certificado digital pelo serialNumber:
            <code>
            var serialNumber = "1234567890"
            var certificado = new CertificadoDigital();        
            var certificadoSelecionado = certificado.BuscarCertificadoDigital(serialNumber);
            MessageBox.Show(certificadoSelecionado.Subject);
            </code>
            Buscar o certificado digital pelo ThumbPrint:
            <code>
            var thumbPrint = "1234567890154878787978987987987"
            var certificado = new CertificadoDigital();        
            var certificadoSelecionado = certificado.BuscarCertificadoDigital(thumbPrint);
            MessageBox.Show(certificadoSelecionado.Subject);
            </code>
            </example>
        </member>
        <member name="M:Unimake.Security.Platform.CertificadoDigital.CarregarCertificadoDigitalA1(System.Byte[],System.String)">
            <summary>
            Carrega o certificado digital pelos bytes do certificado
            </summary>
            <param name="bytes">Bytes do certificado para carga do mesmo</param>
            <param name="senha">Senha utilizada para instalar o certificado, será usada para carga do mesmo</param>
            <returns>Certificado Digital</returns>
            <example>
            <code>
            var certificado = new CertificadoDigital();        
            </code>
            Criando uma array bytes do arquivo do certificado para gravar em banco de dados (visando maior segurança) para resgatar o conteúdo da base de dados.
            <code>
            var certificadoByte = certificado.ToByteArray(@"d:\projetos\UnimakePV.pfx");
            </code>
            Recuperar o certificado para uso a partir de uma array byte
            <code>
            var certificadoSelecionado = certificado.CarregarCertificadoDigitalA1(certificadoByte, "12345678");
            MessageBox.Show(certificadoSelecionado.Subject);
            </code>
            </example>
        </member>
        <member name="M:Unimake.Security.Platform.CertificadoDigital.CarregarCertificadoDigitalA1(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
            <summary>
            Carrega o certificado digital pelos bytes do certificado
            </summary>
            <param name="bytes">Bytes do certificado para carga do mesmo</param>
            <param name="senha">Senha utilizada para instalar o certificado, será usada para carga do mesmo</param>
            <param name="keyStorageFlags">Define onde e como importar a chave privada de um certificado X.509. (Uma combinação bit a bit dos valores de enumeração que controlam onde e como importar o certificado.)</param>
            <returns>Certificado Digital</returns>
            <example>
            <code>
            var certificado = new CertificadoDigital();        
            </code>
            Criando uma array bytes do arquivo do certificado para gravar em banco de dados (visando maior segurança) para resgatar o conteúdo da base de dados.
            <code>
            var certificadoByte = certificado.ToByteArray(@"d:\projetos\UnimakePV.pfx");
            </code>
            Recuperar o certificado para uso a partir de uma array byte com definição de onde e como importar a chave privada, muitas vezes necessário definir em aplicações web.
            <code>
            var certificadoSelecionado = certificado.CarregarCertificadoDigitalA1(certificadoByte, "12345678", X509KeyStorageFlags.MachineKeySet);
            MessageBox.Show(certificadoSelecionado.Subject);
            </code>
            </example>
        </member>
        <member name="M:Unimake.Security.Platform.CertificadoDigital.CarregarCertificadoDigitalA1(System.String,System.String)">
            <summary>
            Carrega o certificado digital A1 direto do arquivo .PFX
            </summary>
            <param name="caminho">Caminho do certificado digital. Ex. c:\certificados\certificado.pfx</param>
            <param name="senha">Senha utilizada para instalar o arquivo .pfx</param>
            <returns>Certificado Digital</returns>
            <example>
            <code>
            var certificado = new CertificadoDigital();
            var certificadoSelecionado = certificado.CarregarCertificadoDigitalA1(@"d:\projetos\UnimakePV.pfx", "12345678");
            MessageBox.Show(certificadoSelecionado.Subject);
            </code>
            </example>
        </member>
        <member name="M:Unimake.Security.Platform.CertificadoDigital.CarregarCertificadoDigitalA1(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
            <summary>
            Carrega o certificado digital A1 direto do arquivo .PFX
            </summary>
            <param name="caminho">Caminho do certificado digital. Ex. c:\certificados\certificado.pfx</param>
            <param name="senha">Senha utilizada para instalar o arquivo .pfx</param>
            <param name="keyStorageFlags">Define onde e como importar a chave privada de um certificado X.509. (Uma combinação bit a bit dos valores de enumeração que controlam onde e como importar o certificado.)</param>
            <returns>Certificado Digital</returns>
            Recupera o certificado digital direto do .PFX com definição de onde e como importar a chave privada, muitas vezes necessário definir em aplicações web.
            <code>
            var certificado = new CertificadoDigital();
            var certificadoSelecionado = certificado.CarregarCertificadoDigitalA1(@"d:\projetos\UnimakePV.pfx", "12345678", X509KeyStorageFlags.MachineKeySet);
            MessageBox.Show(certificadoSelecionado.Subject);
            </code>
        </member>
        <member name="M:Unimake.Security.Platform.CertificadoDigital.FromBase64(System.String,System.String)">
            <summary>
            Converte a string Base64 no certificado
            </summary>
            <param name="base64">String base64 convertida pelo método <see cref="M:Unimake.Security.Platform.CertificadoDigital.ToBase64(System.String)"/></param>
            <param name="password">Senha do certificado</param>
            <returns>Certificado digital</returns>
            <example>
            <code>
            var certificado = new CertificadoDigital();
            </code>
            Criando um Base64 do arquivo do certificado para gravar em banco de dados (visando maior segurança) para resgatar o conteúdo da base de dados.
            <code>
            var certificadoBase64 = certificado.ToBase64(@"d:\projetos\UnimakePV.pfx");
            </code>   
            Recuperar o certificado para uso a partir de um Base64
            <code>
            var certificadoSelecionado = certificado.FromBase64(certificadoBase64, "12345678");
            MessageBox.Show(certificadoSelecionado.Subject);
            </code>
            </example>
        </member>
        <member name="M:Unimake.Security.Platform.CertificadoDigital.FromBase64(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
            <summary>
            Converte a string Base64 no certificado
            </summary>
            <param name="base64">String base64 convertida pelo método <see cref="M:Unimake.Security.Platform.CertificadoDigital.ToBase64(System.String)"/></param>
            <param name="password">Senha do certificado</param>
            <param name="keyStorageFlags">Define onde e como importar a chave privada de um certificado X.509. (Uma combinação bit a bit dos valores de enumeração que controlam onde e como importar o certificado.)</param>
            <returns>Certificado digital</returns>
            <example>
            <code>
            var certificado = new CertificadoDigital();
            </code>
            Criando um Base64 do arquivo do certificado para gravar em banco de dados (visando maior segurança) para resgatar o conteúdo da base de dados.
            <code>
            var certificadoBase64 = certificado.ToBase64(@"d:\projetos\UnimakePV.pfx");
            </code>   
            Recupera o certificado digital de uma string Base64 com definição de onde e como importar a chave privada, muitas vezes necessário definir em aplicações web.
            <code>
            var certificadoSelecionado = certificado.FromBase64(certificadoBase64, "12345678", X509KeyStorageFlags.MachineKeySet);
            MessageBox.Show(certificadoSelecionado.Subject);
            </code>
            </example>
        </member>
        <member name="M:Unimake.Security.Platform.CertificadoDigital.Selecionar">
            <summary>
            Abre a tela de dialogo do windows para seleção do certificado digital
            </summary>
            <returns>Retorna o certificado digital selecionado</returns>
            <example>
            <code>
            var certificado = new CertificadoDigital();
            var certificadoSelecionado = certificado.AbrirTelaSelecao();
            MessageBox.Show(certificadoSelecionado.Subject);
            </code>
            </example>
        </member>
        <member name="M:Unimake.Security.Platform.CertificadoDigital.ToBase64(System.String)">
            <summary>
            Converte o arquivo .PFX do certificado em base64
            </summary>
            <param name="arquivo">Nome do arquivo</param>
            <returns>Base64 do certificado digital informado</returns>
            <example>
            Criando um Base64 do arquivo do certificado para gravar em banco de dados (visando maior segurança) para resgatar o conteúdo da base de dados.
            <code>
            var certificado = new CertificadoDigital();
            var base64DoCertificado = certificado.ToBase64(@"d:\projetos\UnimakePV.pfx");
            </code>
            Grave o conteúdo do variável "base64DoCertificado" para gravar em sua base de dados
            </example>
        </member>
        <member name="M:Unimake.Security.Platform.CertificadoDigital.ToByteArray(System.String)">
            <summary>
            Converte o arquivo do certificado em um array de bytes
            </summary>
            <param name="arquivo">Nome do arquivo</param>
            <returns>Array de bytes do arquivo do certificado</returns>
            <example>
            Criando uma array bytes do arquivo do certificado para gravar em banco de dados (visando maior segurança) para resgatar o conteúdo da base de dados.
            <code>
            var certificado = new CertificadoDigital();
            var arrayByteCertificado = certificado.ToByteArray(@"d:\projetos\UnimakePV.pfx");;
            </code>
            Grave o conteúdo do variável "arrayByteCertificado" para gravar em sua base de dados
            </example>
        </member>
        <member name="M:Unimake.Security.Platform.CertificadoDigital.Vencido(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Verifica se o certificado digital está vencido
            </summary>
            <param name="certificado">Certificado digital</param>
            <returns>true = Certificado vencido</returns>
            <example>
            <code>
            var certificado = new CertificadoDigital();
            var certificadoSelecionado = certificado.CarregarCertificadoDigitalA1(@"d:\projetos\UnimakePV.pfx", "12345678");
            if (certificado.Vencido(certificadoSelecionado))
            {
               MessageBox.Show("Certificado digital vencido!!!");
            }
            </code>
            </example>
        </member>
        <member name="M:Unimake.Security.Platform.CertificadoDigital.GetThumbprint(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Retorna o Thumbprint (impressão digital, ID) do certificado digital
            </summary>
            <param name="certificado">Certificado que é para pegar a informação</param>
            <returns>Retorna o Thumbprint</returns>
            <example>
            <code>
            var certificado = new CertificadoDigital();
            var certificadoSelecionado = certificado.CarregarCertificadoDigitalA1(@"d:\projetos\UnimakePV.pfx", "12345678");
            var thumbPrint = certificado.GetThumbprint(certificadoSelecionado)
            </code>
            </example>
        </member>
        <member name="M:Unimake.Security.Platform.CertificadoDigital.GetSubject(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Retorna Subject (dados do proprietário) do certificado digital
            </summary>
            <param name="certificado">Certificado que é para pegar a informação</param>
            <returns>Retorna o Subject</returns>
            <example>
            <code>
            var certificado = new CertificadoDigital();
            var certificadoSelecionado = certificado.CarregarCertificadoDigitalA1(@"d:\projetos\UnimakePV.pfx", "12345678");
            var subject = certificado.GetSubject(certificadoSelecionado)
            </code>
            </example>
        </member>
        <member name="M:Unimake.Security.Platform.CertificadoDigital.GetSerialNumber(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Retorna o SerialNumber (Número de série, ID) do certificado digital
            </summary>
            <param name="certificado">Certificado que é para pegar a informação</param>
            <returns>Retorna o SerialNumber</returns>
            <example>
            <code>
            var certificado = new CertificadoDigital();
            var certificadoSelecionado = certificado.CarregarCertificadoDigitalA1(@"d:\projetos\UnimakePV.pfx", "12345678");
            var serialNumber = certificado.GetSerialNumber(certificadoSelecionado)
            </code>
            </example>
        </member>
        <member name="M:Unimake.Security.Platform.CertificadoDigital.GetNotAfter(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Retorna o Not After (Data de vencimento final do certificado digital) do certificado digital
            </summary>
            <param name="certificado">Certificado que é para pegar a informação</param>
            <returns>Retorna o Not AfterThumbprint</returns>
            <example>
            <code>
            var certificado = new CertificadoDigital();
            var certificadoSelecionado = certificado.CarregarCertificadoDigitalA1(@"d:\projetos\UnimakePV.pfx", "12345678");
            var validadeInicial = certificado.GetNotAfter(certificadoSelecionado)
            </code>
            </example>
        </member>
        <member name="M:Unimake.Security.Platform.CertificadoDigital.GetNotBefore(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Retorna o Not Before (Data de vencimento inicial do certificado digital) do certificado digital
            </summary>
            <param name="certificado">Certificado que é para pegar a informação</param>
            <returns>Retorna o NotBefore</returns>
            <example>
            <code>
            var certificado = new CertificadoDigital();
            var certificadoSelecionado = certificado.CarregarCertificadoDigitalA1(@"d:\projetos\UnimakePV.pfx", "12345678");
            var validadeFinal = certificado.GetNotBefore(certificadoSelecionado)
            </code>
            </example>
        </member>
        <member name="T:Unimake.Security.Platform.CertificadoDigitalInterop">
            <summary>
            Trabalhar com certificado digital - Interop
            </summary>
        </member>
        <member name="M:Unimake.Security.Platform.CertificadoDigitalInterop.#ctor">
            <summary>
            Trabalhar com certificado digital
            </summary>
        </member>
        <member name="M:Unimake.Security.Platform.CertificadoDigitalInterop.AbrirTelaSelecao">
            <summary>
            Abre a tela para selecionar o certificado digital
            </summary>
        </member>
        <member name="M:Unimake.Security.Platform.CertificadoDigitalInterop.ToBase64(System.String)">
            <summary>
            Converter o arquivo do certificado A1 (.PFX) para string Base64
            </summary>
            <param name="arquivo">Caminho do arquivo do certificado A1 (.PFX)</param>
            <returns>Retorna o BASE64 do arquivo do certificado digital</returns>
        </member>
        <member name="M:Unimake.Security.Platform.CertificadoDigitalInterop.CarregarCertificadoDigitalA1(System.String,System.String)">
            <summary>
            Carrega o certificado digital A1 partindo o arquivo .PFX
            </summary>
            <param name="caminho">Caminho do arquivo .PFX do certificado A1</param>
            <param name="senha">Senha de instalação/uso do certificado</param>
        </member>
        <member name="M:Unimake.Security.Platform.CertificadoDigitalInterop.FromBase64(System.String,System.String)">
            <summary>
            Converte a string Base64 no certificado
            </summary>
            <param name="base64">String base64 convertida pelo método <see cref="M:Unimake.Security.Platform.CertificadoDigitalInterop.ToBase64(System.String)"/></param>
            <param name="password">Senha do certificado</param>
        </member>
        <member name="M:Unimake.Security.Platform.CertificadoDigitalInterop.Vencido">
            <summary>
            Verifica se o certificado digital selecionado está vencido
            </summary>
            <returns>true = vencido</returns>
        </member>
        <member name="M:Unimake.Security.Platform.CertificadoDigitalInterop.GetThumbprint">
            <summary>
            Retorna o thumbprint do certificado digital selecionado
            </summary>
            <returns>Thumbprint do certificado digital selecionado</returns>
        </member>
        <member name="M:Unimake.Security.Platform.CertificadoDigitalInterop.GetSubject">
            <summary>
            Retorna o subject do certificado digital selecionado
            </summary>
            <returns>Subject do certificado digital selecionado</returns>
        </member>
        <member name="M:Unimake.Security.Platform.CertificadoDigitalInterop.GetSerialNumber">
            <summary>
            Retorna o SerialNumber do certificado digital selecionado
            </summary>
            <returns>SerialNumber do certificado digital selecionado</returns>
        </member>
        <member name="M:Unimake.Security.Platform.CertificadoDigitalInterop.GetNotAfter">
            <summary>
            Retorna o Not After (Data de vencimento final do certificado digital) do certificado digital
            </summary>
            <returns>Retorna o Not After</returns>
        </member>
        <member name="M:Unimake.Security.Platform.CertificadoDigitalInterop.GetNotBefore">
            <summary>
            Retorna o Not Before (Data de vencimento inicial do certificado digital) do certificado digital
            </summary>
            <returns>Retorna o NotBefore</returns>
        </member>
        <member name="T:Unimake.Security.Platform.Exceptions.CarregarCertificadoException">
            <summary>
            Exceção ao carregar o certificado digital
            </summary>
        </member>
        <member name="M:Unimake.Security.Platform.Exceptions.CarregarCertificadoException.#ctor(System.String)">
            <summary>
            Falha ao carregar certificado digital
            </summary>
            <param name="message">Mensagem da exceção</param>
        </member>
        <member name="T:Unimake.Security.Platform.Exceptions.CertificadoDigitalException">
            <summary>
            Classe de exceção quando o certificado digital não é localizado ou está com falha
            </summary>
        </member>
        <member name="M:Unimake.Security.Platform.Exceptions.CertificadoDigitalException.#ctor">
            <summary>
            Exceção quando o certificado digital não é localizado ou está com falha
            </summary>
        </member>
        <member name="M:Unimake.Security.Platform.Exceptions.CertificadoDigitalException.#ctor(System.String,Unimake.Security.Platform.Exceptions.ErrorCodes)">
            <summary>
            Exceção quando o certificado digital não é localizado ou está com falha
            </summary>
            <param name="message">Mensagem de exceção</param>
            <param name="errorCode">Erro ocorrido</param>
        </member>
        <member name="T:Unimake.Security.Platform.Exceptions.ErrorCodes">
            <summary>
            Códigos de erros das exceções geradas na DLL. Útil para outras linguagens (INTEROP)
            </summary>
        </member>
        <member name="F:Unimake.Security.Platform.Exceptions.ErrorCodes.CertificadoDigitalNaoLocalizado">
            <summary>
            Certificado digital não localizado ou o mesmo está com falha
            </summary>
        </member>
        <member name="F:Unimake.Security.Platform.Exceptions.ErrorCodes.ValidacaoSchemaXML">
            <summary>
            Erro de validação do XML contra o schema (arquivo XSD)
            </summary>
        </member>
        <member name="F:Unimake.Security.Platform.Exceptions.ErrorCodes.ValidatorDFe">
            <summary>
            Erro de validação de diversas das regras dos documentos fiscais eletrônicos (NFe, CTe, MDFe, NFCe, etc...). Validação realizada pelo Validator da DLL Unimake.DFe.
            </summary>
        </member>
        <member name="F:Unimake.Security.Platform.Exceptions.ErrorCodes.SenhaCertificadoIncorreta">
            <summary>
            Senha do certificado digital está incorreta
            </summary>
        </member>
    </members>
</doc>
